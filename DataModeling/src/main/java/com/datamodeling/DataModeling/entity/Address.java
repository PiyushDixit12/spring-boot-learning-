package com.datamodeling.DataModeling.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Data;

/**
 * ADDRESS ENTITY
 *
 * This class represents an Address entity that is mapped to a database table. It is used in a one-to-one relationship with the User entity.
 *
 * Key Concepts:
 *
 * - @Entity: This annotation marks the class as a JPA entity, meaning it will be mapped to a database table named 'address'.
 * - @Id: Specifies the primary key of the entity. The 'id' field is used to uniquely identify each Address record in the table.
 * - @GeneratedValue: Defines the strategy for generating primary key values. 'GenerationType.IDENTITY' indicates that the primary key will be auto-incremented by the database.
 * - @Data: Lombok annotation that generates common methods like getters, setters, equals(), hashCode(), and toString() for the entity, reducing boilerplate code.
 *
 * Relationship Details:
 *
 * - The Address entity has a one-to-one relationship with the User entity. Each Address is associated with exactly one User.
 * - The 'id' field serves as the primary key for the Address table and is referenced by the 'address_id' column in the User table.
 *
 * Note:
 *
 * - The Address entity does not need explicit annotations for the relationship on its side unless you want to make the relationship bidirectional. In a bidirectional relationship, the Address entity would include a reference to the User entity and manage the inverse side of the relationship.
 */

@Data
@Entity
public class Address {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String street;
    private String city;

    /**
     * The unique identifier for each Address.
     *
     * This 'id' field is auto-generated by the database, and it uniquely identifies each Address record.
     */

    /**
     * The User associated with this Address.
     *
     * This relationship is mapped by the 'address' field in the User entity.
     */
//    UN COMMENT IF YOU WANT TO USE BI-DIRECTIONAL MAPPINGS
//    @OneToOne
//    @JoinColumn(name = "user_id")
//    private User user;
}
